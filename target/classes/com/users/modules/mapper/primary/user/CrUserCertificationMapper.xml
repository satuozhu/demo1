<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.users.modules.mapper.primary.user.CrUserCertificationMapper">
  <resultMap id="BaseResultMap" type="com.common.entity.user.CrUserCertification">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="user_id" jdbcType="BIGINT" property="userId" />
    <result column="real_name" jdbcType="VARCHAR" property="realName" />
    <result column="id_card_no" jdbcType="VARCHAR" property="idCardNo" />
    <result column="sex" jdbcType="CHAR" property="sex" />
    <result column="birthday" jdbcType="VARCHAR" property="birthday" />
    <result column="nation" jdbcType="VARCHAR" property="nation" />
    <result column="birth_address" jdbcType="VARCHAR" property="birthAddress" />
    <result column="issue_address" jdbcType="VARCHAR" property="issueAddress" />
    <result column="issue_date" jdbcType="VARCHAR" property="issueDate" />
    <result column="expiry_date" jdbcType="VARCHAR" property="expiryDate" />
    <result column="auth_status" jdbcType="INTEGER" property="authStatus" />
    <result column="fail_reason" jdbcType="VARCHAR" property="failReason" />
    <result column="create_time" jdbcType="BIGINT" property="createTime" />
    <result column="update_time" jdbcType="BIGINT" property="updateTime" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="com.common.entity.user.CrUserCertificationWithBLOBs">
    <result column="id_card_front" jdbcType="LONGVARCHAR" property="idCardFront" />
    <result column="id_card_back" jdbcType="LONGVARCHAR" property="idCardBack" />
    <result column="face_auth" jdbcType="LONGVARCHAR" property="faceAuth" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, user_id, real_name, id_card_no, sex, birthday, nation, birth_address, issue_address, 
    issue_date, expiry_date, auth_status, fail_reason, create_time, update_time
  </sql>
  <sql id="Blob_Column_List">
    id_card_front, id_card_back, face_auth
  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="com.common.entity.user.CrUserCertificationExample" resultMap="ResultMapWithBLOBs">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from cr_user_certification
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" parameterType="com.common.entity.user.CrUserCertificationExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from cr_user_certification
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from cr_user_certification
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from cr_user_certification
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.common.entity.user.CrUserCertificationExample">
    delete from cr_user_certification
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.common.entity.user.CrUserCertificationWithBLOBs">
    insert into cr_user_certification (id, user_id, real_name, 
      id_card_no, sex, birthday, 
      nation, birth_address, issue_address, 
      issue_date, expiry_date, auth_status, 
      fail_reason, create_time, update_time, 
      id_card_front, id_card_back, face_auth
      )
    values (#{id,jdbcType=BIGINT}, #{userId,jdbcType=BIGINT}, #{realName,jdbcType=VARCHAR}, 
      #{idCardNo,jdbcType=VARCHAR}, #{sex,jdbcType=CHAR}, #{birthday,jdbcType=VARCHAR}, 
      #{nation,jdbcType=VARCHAR}, #{birthAddress,jdbcType=VARCHAR}, #{issueAddress,jdbcType=VARCHAR}, 
      #{issueDate,jdbcType=VARCHAR}, #{expiryDate,jdbcType=VARCHAR}, #{authStatus,jdbcType=INTEGER}, 
      #{failReason,jdbcType=VARCHAR}, #{createTime,jdbcType=BIGINT}, #{updateTime,jdbcType=BIGINT}, 
      #{idCardFront,jdbcType=LONGVARCHAR}, #{idCardBack,jdbcType=LONGVARCHAR}, #{faceAuth,jdbcType=LONGVARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.common.entity.user.CrUserCertificationWithBLOBs">
    insert into cr_user_certification
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="userId != null">
        user_id,
      </if>
      <if test="realName != null">
        real_name,
      </if>
      <if test="idCardNo != null">
        id_card_no,
      </if>
      <if test="sex != null">
        sex,
      </if>
      <if test="birthday != null">
        birthday,
      </if>
      <if test="nation != null">
        nation,
      </if>
      <if test="birthAddress != null">
        birth_address,
      </if>
      <if test="issueAddress != null">
        issue_address,
      </if>
      <if test="issueDate != null">
        issue_date,
      </if>
      <if test="expiryDate != null">
        expiry_date,
      </if>
      <if test="authStatus != null">
        auth_status,
      </if>
      <if test="failReason != null">
        fail_reason,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
      <if test="idCardFront != null">
        id_card_front,
      </if>
      <if test="idCardBack != null">
        id_card_back,
      </if>
      <if test="faceAuth != null">
        face_auth,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=BIGINT},
      </if>
      <if test="userId != null">
        #{userId,jdbcType=BIGINT},
      </if>
      <if test="realName != null">
        #{realName,jdbcType=VARCHAR},
      </if>
      <if test="idCardNo != null">
        #{idCardNo,jdbcType=VARCHAR},
      </if>
      <if test="sex != null">
        #{sex,jdbcType=CHAR},
      </if>
      <if test="birthday != null">
        #{birthday,jdbcType=VARCHAR},
      </if>
      <if test="nation != null">
        #{nation,jdbcType=VARCHAR},
      </if>
      <if test="birthAddress != null">
        #{birthAddress,jdbcType=VARCHAR},
      </if>
      <if test="issueAddress != null">
        #{issueAddress,jdbcType=VARCHAR},
      </if>
      <if test="issueDate != null">
        #{issueDate,jdbcType=VARCHAR},
      </if>
      <if test="expiryDate != null">
        #{expiryDate,jdbcType=VARCHAR},
      </if>
      <if test="authStatus != null">
        #{authStatus,jdbcType=INTEGER},
      </if>
      <if test="failReason != null">
        #{failReason,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=BIGINT},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=BIGINT},
      </if>
      <if test="idCardFront != null">
        #{idCardFront,jdbcType=LONGVARCHAR},
      </if>
      <if test="idCardBack != null">
        #{idCardBack,jdbcType=LONGVARCHAR},
      </if>
      <if test="faceAuth != null">
        #{faceAuth,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.common.entity.user.CrUserCertificationExample" resultType="java.lang.Long">
    select count(*) from cr_user_certification
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update cr_user_certification
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=BIGINT},
      </if>
      <if test="record.userId != null">
        user_id = #{record.userId,jdbcType=BIGINT},
      </if>
      <if test="record.realName != null">
        real_name = #{record.realName,jdbcType=VARCHAR},
      </if>
      <if test="record.idCardNo != null">
        id_card_no = #{record.idCardNo,jdbcType=VARCHAR},
      </if>
      <if test="record.sex != null">
        sex = #{record.sex,jdbcType=CHAR},
      </if>
      <if test="record.birthday != null">
        birthday = #{record.birthday,jdbcType=VARCHAR},
      </if>
      <if test="record.nation != null">
        nation = #{record.nation,jdbcType=VARCHAR},
      </if>
      <if test="record.birthAddress != null">
        birth_address = #{record.birthAddress,jdbcType=VARCHAR},
      </if>
      <if test="record.issueAddress != null">
        issue_address = #{record.issueAddress,jdbcType=VARCHAR},
      </if>
      <if test="record.issueDate != null">
        issue_date = #{record.issueDate,jdbcType=VARCHAR},
      </if>
      <if test="record.expiryDate != null">
        expiry_date = #{record.expiryDate,jdbcType=VARCHAR},
      </if>
      <if test="record.authStatus != null">
        auth_status = #{record.authStatus,jdbcType=INTEGER},
      </if>
      <if test="record.failReason != null">
        fail_reason = #{record.failReason,jdbcType=VARCHAR},
      </if>
      <if test="record.createTime != null">
        create_time = #{record.createTime,jdbcType=BIGINT},
      </if>
      <if test="record.updateTime != null">
        update_time = #{record.updateTime,jdbcType=BIGINT},
      </if>
      <if test="record.idCardFront != null">
        id_card_front = #{record.idCardFront,jdbcType=LONGVARCHAR},
      </if>
      <if test="record.idCardBack != null">
        id_card_back = #{record.idCardBack,jdbcType=LONGVARCHAR},
      </if>
      <if test="record.faceAuth != null">
        face_auth = #{record.faceAuth,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map">
    update cr_user_certification
    set id = #{record.id,jdbcType=BIGINT},
      user_id = #{record.userId,jdbcType=BIGINT},
      real_name = #{record.realName,jdbcType=VARCHAR},
      id_card_no = #{record.idCardNo,jdbcType=VARCHAR},
      sex = #{record.sex,jdbcType=CHAR},
      birthday = #{record.birthday,jdbcType=VARCHAR},
      nation = #{record.nation,jdbcType=VARCHAR},
      birth_address = #{record.birthAddress,jdbcType=VARCHAR},
      issue_address = #{record.issueAddress,jdbcType=VARCHAR},
      issue_date = #{record.issueDate,jdbcType=VARCHAR},
      expiry_date = #{record.expiryDate,jdbcType=VARCHAR},
      auth_status = #{record.authStatus,jdbcType=INTEGER},
      fail_reason = #{record.failReason,jdbcType=VARCHAR},
      create_time = #{record.createTime,jdbcType=BIGINT},
      update_time = #{record.updateTime,jdbcType=BIGINT},
      id_card_front = #{record.idCardFront,jdbcType=LONGVARCHAR},
      id_card_back = #{record.idCardBack,jdbcType=LONGVARCHAR},
      face_auth = #{record.faceAuth,jdbcType=LONGVARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update cr_user_certification
    set id = #{record.id,jdbcType=BIGINT},
      user_id = #{record.userId,jdbcType=BIGINT},
      real_name = #{record.realName,jdbcType=VARCHAR},
      id_card_no = #{record.idCardNo,jdbcType=VARCHAR},
      sex = #{record.sex,jdbcType=CHAR},
      birthday = #{record.birthday,jdbcType=VARCHAR},
      nation = #{record.nation,jdbcType=VARCHAR},
      birth_address = #{record.birthAddress,jdbcType=VARCHAR},
      issue_address = #{record.issueAddress,jdbcType=VARCHAR},
      issue_date = #{record.issueDate,jdbcType=VARCHAR},
      expiry_date = #{record.expiryDate,jdbcType=VARCHAR},
      auth_status = #{record.authStatus,jdbcType=INTEGER},
      fail_reason = #{record.failReason,jdbcType=VARCHAR},
      create_time = #{record.createTime,jdbcType=BIGINT},
      update_time = #{record.updateTime,jdbcType=BIGINT}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.common.entity.user.CrUserCertificationWithBLOBs">
    update cr_user_certification
    <set>
      <if test="userId != null">
        user_id = #{userId,jdbcType=BIGINT},
      </if>
      <if test="realName != null">
        real_name = #{realName,jdbcType=VARCHAR},
      </if>
      <if test="idCardNo != null">
        id_card_no = #{idCardNo,jdbcType=VARCHAR},
      </if>
      <if test="sex != null">
        sex = #{sex,jdbcType=CHAR},
      </if>
      <if test="birthday != null">
        birthday = #{birthday,jdbcType=VARCHAR},
      </if>
      <if test="nation != null">
        nation = #{nation,jdbcType=VARCHAR},
      </if>
      <if test="birthAddress != null">
        birth_address = #{birthAddress,jdbcType=VARCHAR},
      </if>
      <if test="issueAddress != null">
        issue_address = #{issueAddress,jdbcType=VARCHAR},
      </if>
      <if test="issueDate != null">
        issue_date = #{issueDate,jdbcType=VARCHAR},
      </if>
      <if test="expiryDate != null">
        expiry_date = #{expiryDate,jdbcType=VARCHAR},
      </if>
      <if test="authStatus != null">
        auth_status = #{authStatus,jdbcType=INTEGER},
      </if>
      <if test="failReason != null">
        fail_reason = #{failReason,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=BIGINT},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=BIGINT},
      </if>
      <if test="idCardFront != null">
        id_card_front = #{idCardFront,jdbcType=LONGVARCHAR},
      </if>
      <if test="idCardBack != null">
        id_card_back = #{idCardBack,jdbcType=LONGVARCHAR},
      </if>
      <if test="faceAuth != null">
        face_auth = #{faceAuth,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.common.entity.user.CrUserCertificationWithBLOBs">
    update cr_user_certification
    set user_id = #{userId,jdbcType=BIGINT},
      real_name = #{realName,jdbcType=VARCHAR},
      id_card_no = #{idCardNo,jdbcType=VARCHAR},
      sex = #{sex,jdbcType=CHAR},
      birthday = #{birthday,jdbcType=VARCHAR},
      nation = #{nation,jdbcType=VARCHAR},
      birth_address = #{birthAddress,jdbcType=VARCHAR},
      issue_address = #{issueAddress,jdbcType=VARCHAR},
      issue_date = #{issueDate,jdbcType=VARCHAR},
      expiry_date = #{expiryDate,jdbcType=VARCHAR},
      auth_status = #{authStatus,jdbcType=INTEGER},
      fail_reason = #{failReason,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=BIGINT},
      update_time = #{updateTime,jdbcType=BIGINT},
      id_card_front = #{idCardFront,jdbcType=LONGVARCHAR},
      id_card_back = #{idCardBack,jdbcType=LONGVARCHAR},
      face_auth = #{faceAuth,jdbcType=LONGVARCHAR}
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.common.entity.user.CrUserCertification">
    update cr_user_certification
    set user_id = #{userId,jdbcType=BIGINT},
      real_name = #{realName,jdbcType=VARCHAR},
      id_card_no = #{idCardNo,jdbcType=VARCHAR},
      sex = #{sex,jdbcType=CHAR},
      birthday = #{birthday,jdbcType=VARCHAR},
      nation = #{nation,jdbcType=VARCHAR},
      birth_address = #{birthAddress,jdbcType=VARCHAR},
      issue_address = #{issueAddress,jdbcType=VARCHAR},
      issue_date = #{issueDate,jdbcType=VARCHAR},
      expiry_date = #{expiryDate,jdbcType=VARCHAR},
      auth_status = #{authStatus,jdbcType=INTEGER},
      fail_reason = #{failReason,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=BIGINT},
      update_time = #{updateTime,jdbcType=BIGINT}
    where id = #{id,jdbcType=BIGINT}
  </update>
</mapper>